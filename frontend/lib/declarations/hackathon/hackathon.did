type HackathonStatus = 
 variant {
   Cancelled;
   Completed;
   Ongoing;
   Upcoming;
 };
type HackathonMode = 
 variant {
   Hybrid;
   Offline;
   Online;
 };
type HackathonId = text;
type Hackathon = 
 record {
   created_at: text;
   description: text;
   end_date: text;
   hackathon_id: HackathonId;
   location: text;
   max_team_size: nat;
   min_team_size: nat;
   mode: HackathonMode;
   prize_pool: text;
   registration_end: text;
   registration_start: text;
   rules: text;
   start_date: text;
   status: HackathonStatus;
   tagline: text;
   theme: text;
   title: text;
   updated_at: text;
 };
type CreateHackathonRequest = 
 record {
   description: text;
   end_date: text;
   location: text;
   max_team_size: nat;
   min_team_size: nat;
   mode: HackathonMode;
   prize_pool: text;
   registration_end: text;
   registration_start: text;
   rules: text;
   start_date: text;
   tagline: text;
   theme: text;
   title: text;
 };
service : {
  createHackathon: (request: CreateHackathonRequest) -> (Hackathon);
  deleteHackathonAsOrganizer: (hackathon_id: text, organizer_id: text) ->
   (text);
  duplicateHackathon: (hackathon_id: text, organizer_id: text) -> (Hackathon);
  getHackathonsByOrganizer: (organizer_id: text, limit: nat, offset: 
   nat, status: text) -> (vec Hackathon) query;
  hello: () -> (text) query;
  listHackathons: (limit: nat, offset: nat) -> (vec Hackathon) query;
  updateHackathonStatus: (hackathon_id: text, status: text, organizer_id:
   text) -> (Hackathon);
}
